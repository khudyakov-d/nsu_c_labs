Регистры общего назначения (РОН, англ. General Purpose Registers, сокращённо GPR). Размер — 32 бита.

%eax: Accumulator register — аккумулятор, применяется для хранения результатов промежуточных вычислений.
%ebx: Base register — базовый регистр, применяется для хранения адреса (указателя) на некоторый объект в памяти.
%ecx: Counter register — счетчик, его неявно используют некоторые команды для организации циклов (см. loop).
%edx: Data register — регистр данных, используется для хранения результатов промежуточных вычислений и ввода-вывода.
%esp: Stack pointer register — указатель стека. Содержит адрес вершины стека.
%ebp: Base pointer register — указатель базы кадра стека (англ. stack frame). Предназначен для организации произвольного доступа к данным внутри стека.
%esi: Source index register — индекс источника, в цепочечных операциях содержит указатель на текущий элемент-источник.
%edi: Destination index register — индекс приёмника, в цепочечных операциях содержит указатель на текущий элемент-приёмник.

Регистр %rbp — это указатель базы, который указывает на базу текущего стекового фрейма,
а %rsp — указатель стека, который указывает на вершину текущего стекового фрейма. 

Виды адресации: прямая, непосредственная, регистровая, косвенная, относительная ,
автоинкрементарная , автодекрементарная

Команды ассемблера — это те инструкции, которые будет исполнять процессор. По сути, это самый низкий уровень программирования процессора. 
Каждая команда состоит из операции (что делать?) и операндов (аргументов). Операции мы будем рассматривать отдельно.
А операнды у всех операций задаются в одном и том же формате. Операндов может быть от 0 (то есть нет вообще) до 3. В роли операнда могут выступать:

1.Конкретное значение, известное на этапе компиляции, — например, числовая константа или символ. Записываются при помощи знака $, например: $0xf1, $10, $hello_str. 
Эти операнды называются непосредственными.
2.Регистр. Перед именем регистра ставится знак %, например: %eax, %bx, %cl.
3.Указатель на ячейку в памяти 
4.Неявный операнд. Эти операнды не записываются непосредственно в исходном коде, а подразумеваются.

1.Команда mov источник, назначение производит копирование источника в назначение. 
2.смещение(база, индекс, множитель) - формирование указателя на ячейку памяти
3. .space  количество_байт - резервация места для данных без инициализации
4. .set    символ, выражение - создание нового символа
5. lea   источник, назначение - Команда lea помещает адрес источника в назначение. Источник должен
находиться в памяти (не может быть непосредственным значением — константой или регистром). 
6.  push  источник
	pop   назначение
	Работа со стеком
7.addl    (num), %eax    Сложить с регистром %eax операнд, 
                         который содержится в оперативной 
                         памяти по адресу метки num и записать 
                         результат в регистр %eax
8.Арифметические команды
	inc   операнд
	dec   операнд
	add   источник, приёмник
	sub   источник, приёмник
	mul   множитель_1
Принцип работы:
	inc: увеличивает операнд на 1.
	dec: уменьшает операнд на 1.
	add: приёмник = приёмник + источник (то есть, увеличивает приёмник на источник).
	sub: приёмник = приёмник - источник (то есть, уменьшает приёмник на источник).

	Команда mul имеет только один операнд. Второй сомножитель задаётся неявно. Он находится в регистре %eax, 
	и его размер выбирается в зависимости от суффикса команды (b, w или l). 
	Место размещения результата также зависит от суффикса команды.

